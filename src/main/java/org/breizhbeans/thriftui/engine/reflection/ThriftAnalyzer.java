package org.breizhbeans.thriftui.engine.reflection;

import com.google.common.reflect.TypeToken;
import org.apache.thrift.TBase;
import org.apache.thrift.TException;
import org.apache.thrift.TServiceClient;
import org.breizhbeans.thriftui.engine.reflection.bean.ParsedThrift;

import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

/**
 * Give it a jar of compiled thrift classes, and maybe you'll get :
 * - the namespace
 * - the structures
 * - the services
 * - the exceptions
 * <p/>
 * Created with IntelliJ IDEA.
 * User: Pascal.Lombard
 * Date: 18/11/12
 * Time: 15:43
 * To change this template use File | Settings | File Templates.
 */
public class ThriftAnalyzer {

    /**
     * As the name implies, return an object with every type of thrift member
     *
     * @param jar a jar file containing the thrift generated classes
     * @return a ParsedThrift objectwith the services, structures and exceptions found in the jar
     * @throws ClassNotFoundException
     */
    @SuppressWarnings({"unchecked"})
    public static ParsedThrift findClassesInJar(JarFile jar) throws ClassNotFoundException {
        ParsedThrift parsedThrift = new ParsedThrift();

        // open jar, get every directory (package)
        // which is *not* META-INF
        Enumeration<JarEntry> entries = jar.entries();
        while (entries.hasMoreElements()) {
            JarEntry entry = entries.nextElement();
            String name = entry.getName();
            // retain only pure POJO generated by thrift (structs, services, exceptions)
            if (name.endsWith(".class") && !name.contains("$")) {
                name = name.substring(0, name.length() - 6);
                name = name.replaceAll("/", ".");

                Class<?> classToTest = Class.forName(name);

                if (parsedThrift.namespace == null) {
                    parsedThrift.namespace = classToTest.getPackage().getName();
                }
                TypeToken<?> type = TypeToken.of(classToTest);

                if (new TypeToken<TException>() {
                }.isAssignableFrom(type)) {
                    // exceptions -> extends TException
                    parsedThrift.exceptions.put(classToTest.getSimpleName(), classToTest);
                } else if (new TypeToken<TBase>() {
                }.isAssignableFrom(type)) {
                    // structures -> implements TBase
                    parsedThrift.structures.put(classToTest.getSimpleName(), classToTest);
                } else {
                    // services -> has a TServiceClient member class
                    for (Class classMember : classToTest.getClasses()) {
                        // Use guava's TypeToken too find wether the class
                        // can be a Thrift Client
                        TypeToken<?> typeOfMember = TypeToken.of(classMember);
                        // If the type of the class can instantiate a TServiceClient -> bingo
                        // It *should* be more reliable than just the name of the class, I hope.
                        boolean isAssignable = new TypeToken<TServiceClient>() {
                        }.isAssignableFrom(typeOfMember);
                        if (isAssignable) {
                            parsedThrift.services.put(classToTest.getSimpleName(), classToTest);
                            parsedThrift.clients.put(classToTest.getSimpleName(), classMember);
                        }
                    }

                }
            }
        }

        return parsedThrift;
    }

}
